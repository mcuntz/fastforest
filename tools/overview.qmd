---
---

### Data viewer {#sec-data-viewer}

::: {layout="[[15,80,8]]"}

::: {#first-column}
<!-- --- --- --- --- --- dfvue --- --- --- --- --- -->
[dfvue](https://mcuntz.github.io/dfvue/)
:::

::: {#second-column}
**dfvue** is a minimal GUI for a quick view of csv files. It uses an input panel similar to Microsoft Excel to check visually that the csv file is read correctly. It provides most options of the pandas.read_csv method to be very versatile on the possible csv format.

**dfvue** is a Python script that can be called from within Python or as a command line tool. It is not supposed to produce publication-ready plots but rather provide a quick overview of the csv file(s).
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/dfvue/)
:::

::: {#first-column}
<!-- --- --- --- --- --- ncvue --- --- --- --- --- -->
[ncvue](https://mcuntz.github.io/ncvue/)
:::

::: {#second-column}
**ncvue** is a minimal GUI for a quick view of netCDF files. It is aiming to be a drop-in replacement for [nview](http://meteora.ucsd.edu/~pierce/ncview_home_page.html) and [panoply](https://www.giss.nasa.gov/tools/panoply/), being slightly more general than ncview targeting maps but providing animations, zooming and panning capabilities unlike panoply. If **ncvue** is used with maps, it supports mostly structured grids, more precisely the grids supported by [cartopy](https://scitools.org.uk/cartopy/docs/latest/).

**ncvue** is a Python script that can be called from within Python or as a command line tool. It is not supposed to produce publication-ready plots but rather provide a quick overview of the netCDF file(s).
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/ncvue/)
:::

::: {#first-column}
<!-- --- --- --- --- --- visualise_icos_cp --- --- --- --- --- -->
[Visualise data from ICOS Carbon Portal](https://www.github.com/mcuntz/visualise_icos_cp/)
:::

::: {#second-column}
Visualise ICOS ecosystem data from the ICOS Carbon Portal (ICOS-CP). This is a demonstrator how to access data on the carbon portal from within Python and make some simple interactive plots.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://www.github.com/mcuntz/visualise_icos_cp/)
:::

:::


### Eddy covariance {#sec-eddy-covariance}

::: {layout="[[15,80,8]]"}

::: {#first-column}
<!-- --- --- --- --- --- hesseflux --- --- --- --- --- -->
[hesseflux](https://mcuntz.github.io/hesseflux/)
:::

::: {#second-column}
**hesseflux** collects Python functions used for post-processing Eddy covariance data of the [ICOS](https://www.icos-cp.eu) class 1 ecosystem site [FR-Hes](https://meta.icos-cp.eu/resources/stations/ES_FR-Hes).

The post-processing functionality for Eddy flux data is similar to the R-package [REddyProc](https://cran.r-project.org/web/packages/REddyProc/index.html) and includes basically the steps described in [Papale et al. (Biogeosciences, 2006)](https://doi.org/10.5194/bg-3-571-2006) plus some extensions such as the daytime method of flux partitioning ([Lasslop et al., Global Change Biology 2010](https://doi.org/10.1111/j.1365-2486.2009.02041.x)).
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/hesseflux/)
:::

:::


### Python tools {#sec-python-tools}

::: {layout="[[15,80,8]]"}

::: {#first-column}
<!-- --- --- --- --- --- mcplot --- --- --- --- --- -->
[mcplot](https://mcuntz.github.io/mcplot/)
:::

::: {#second-column}
**mcplot** provides a class that combines methods to easily produce publication-ready graphics on light or black background. It includes a large number of colormaps collected from different sources. There are a number of functions that help to position plots, number plot panels, or write text on a graph.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/mcplot/)
:::

::: {#first-column}
<!-- --- --- --- --- --- ncio --- --- --- --- --- -->
[ncio](https://mcuntz.github.io/ncio/)
:::

::: {#second-column}
**ncio** is a Python library that provides functions to copy dimensions, variables, attributes, etc. from one netcdf file to a netcdf output file. Replacements and transformations can be performed on the copied entities such as names can be changed or variables can be replaced with other data. It is a thin wrapper of the [netCDF4](https://github.com/Unidata/netcdf4-python) Python package that adds no new functionality but rather provides convenience functions to work easily with netcdf files.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/ncio/)
:::

::: {#first-column}
<!-- --- --- --- --- --- partialwrap --- --- --- --- --- -->
[partialwrap](https://mcuntz.github.io/partialwrap/)
:::

::: {#second-column}
**partialwrap** is a Python library providing easy wrapper functions to use with Pythonâ€™s [functools.partial](https://docs.python.org/3/library/functools.html#functools.partial). Partial's ingenious mechanism allows to use even very complex functions with many arguments and keyword arguments with routines that need functions in the simple form *func(x)*. This includes Python's *map* function, the minimizers in [scipy.optimize](https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html), and plenty of third-party modules such as [emcee](https://github.com/dfm/emcee) or [pyeee](https://mcuntz.github.io/pyeee/). **partialwrap** allows to use any external executable as well as any Python function with arbitrary arguments and keywords to be used with [functools.partial](https://docs.python.org/3/library/functools.html#functools.partial). It also allows to use the executables or functions with easy parallelization of code with, for example, the parallel *map* function of the [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) module or via the Message Passing Interface ([MPI](https://bitbucket.org/mpi4py/mpi4py)).
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/partialwrap/)
:::

::: {#first-column}
<!-- --- --- --- --- --- pyeee --- --- --- --- --- -->
[pyeee](https://mcuntz.github.io/pyeee/)
:::

::: {#second-column}
**pyeee** is a Python library for performing parameter screening of computational models. It uses Morris' method of Elementary Effects and its extension, the so-called Efficient or Sequential Elementary Effects published by

- Cuntz, Mai *et al.* (2015) Computationally inexpensive identification of noninformative model parameters by sequential screening, *Water Resources Research* 51, 6417-6441, doi: [10.1002/2015WR016907](http://doi.org/10.1002/2015WR016907).

**pyeee** can be used with Python functions but also with external programs, using for example the library [partialwrap](https://mcuntz.github.io/partialwrap/). Function evaluation can be distributed with Python's [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) module or via the Message Passing Interface ([MPI](https://bitbucket.org/mpi4py/mpi4py)).
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/pyeee/)
:::

::: {#first-column}
<!-- --- --- --- --- --- pyjams --- --- --- --- --- -->
[pyjams](https://mcuntz.github.io/pyjams/)
:::

::: {#second-column}
**pyjams** is a general Python package offering a wide variety of miscellaneous functions in different categories, such as reading different file formats, date conversion routines, or meteorology. It has several subpackages offering constants, special functions, or objective functions to be used with [scipy.optimize](https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html).

The package modernises and makes available routines of the [JAMS Python library](https://github.com/mcuntz/jams_python), which was created 2009 by Matthias Cuntz while at the Department of Computational Hydrosystems, Helmholtz Centre for Environmental Research - UFZ, Leipzig, Germany, and continued while at Institut National de Recherche pour l'Agriculture, l'Alimentation et l'Environnement (INRAE), Nancy, France.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/pyjams/)
:::

::: {#first-column}
<!-- --- --- --- --- --- loggertools --- --- --- --- --- -->
[loggertools](https://mcuntz.github.io/loggertools/)
:::

::: {#second-column}
**loggertools** is a Python port of the Control File Functions of the Logger Tools Software of Olaf Kolle, MPI-BGC Jena, (c) 2012.

From the Logger Tools Software manual:<br>
"The functions range from simple mathematic operations to more complex and special procedures including functions for checking data. Most of the functions have the following appearance: `y = f(x, p1, p2, ..., pn)` where `y` is the variable in which the result of the function `f` is stored, `x` is the input variable of the function and `p1` to `pn` are parameters (numbers) of the function. An output variable (result of a function) may be the same as an input variable. Some functions need more than one input variable, some functions do not need any parameter and some functions (`mean`, `mini`, `maxi`) may have a variable number of input variables."
:::

::: {#third-column}
[{{< fa solid globe >}}](https://mcuntz.github.io/loggertools/)
:::

:::


### Other tools {#sec-other-tools}

::: {layout="[[15,80,8]]"}

::: {#first-column}
<!-- --- --- --- --- --- ido --- --- --- --- --- -->
[ido](https://www.github.com/mcuntz/ido/)
:::

::: {#second-column}
Collection of bash command line scripts to batch rename files, replace text in file(s), invert the colours in images, etc.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://www.github.com/mcuntz/ido/)
:::

::: {#first-column}
<!-- --- --- --- --- --- install_netcdf --- --- --- --- --- -->
[install_netcdf](https://www.github.com/mcuntz/install_netcdf/)
:::

::: {#second-column}
Install open source packages to work with netCDF and openMPI on Mac OS X and Linux.

The script was initially written to install netCDF4 (hence its name) and all its dependencies to be used with different Fortran compilers, as well as some netCDF tools such as cdo, nco and ncview.

It is also used to install missing packages locally on computing clusters. For example, a cluster might have the netCDF C-library installed but not the Fortran version.

Set parameters in the Setup section as well as the directories to packages that are already installed.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://www.github.com/mcuntz/install_netcdf/)
:::

::: {#first-column}
<!-- --- --- --- --- --- jams_fortran --- --- --- --- --- -->
[jams_fortran](https://www.github.com/mcuntz/jams_fortran/)
:::

::: {#second-column}
The JAMS Fortran library is a collection of general Fortran modules
offering miscellaneous functions in the categories *Computational*, *Date and Time*, *Input / Output*, *Math / Numerics*, *Screening, Sensitivity Analysis and Optimising / Fitting*, and *Miscellaneous*.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://www.github.com/mcuntz/jams_fortran/)
:::

::: {#first-column}
<!-- --- --- --- --- --- jams_makefile --- --- --- --- --- -->
[jams_makefile](https://www.github.com/mcuntz/jams_makefile/)
:::

::: {#second-column}
The project provides a portable, versatile way of compiling Fortran, C, C++, and mixed projects. cfortran.h can be used for Fortran-C interoperability.

Created November 2011 by [Matthias Cuntz](/People/Matthias_Cuntz.Qmd) while at the Department Computational Hydrosystems, Helmholtz Centre for Environmental Research - UFZ, Permoserstr. 15, 04318 Leipzig, Germany and continued while at Institut National de Recherche en Agriculture, Alimentation et Environnement (INRAE), Nancy, France.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://www.github.com/mcuntz/jams_makefile/)
:::

::: {#first-column}
<!-- --- --- --- --- --- setup_mac --- --- --- --- --- -->
[setup_mac](https://www.github.com/mcuntz/setup_mac/)
:::

::: {#second-column}
Setting up macOS for scientific computing and software development

This is a reminder for [myself](/people/matthias_cuntz.qmd) how to setup a new Mac or updating the OS, which might be useful for others. The repository includes some of my dot-files as a reference.
:::

::: {#third-column}
[{{< fa solid globe >}}](https://www.github.com/mcuntz/setup_mac/)
:::

:::
